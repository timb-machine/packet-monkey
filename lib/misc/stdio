#!/bin/bash
# Copyright (c) 2021-2025, Tim Brown
# Copyright (c) 2025, Cisco International Ltd
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Cisco International Ltd nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL CISCO INTERNATIONAL LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

if [ -z "${stdioincluded}" ]
then

stdioincluded=1

. lib/misc/validate

stdio_message_log () {
	check="${1}"
	message="${2}"
	[ "$(validate_is_string "${check}")" -eq 1 ] || false
	[ "$(validate_is_string "${message}")" -eq 1 ] || false
	if [ "${VERBOSE}" -ge 1 ]
	then
		stdio_format_message "32" "I" "${check}" "${message}"
	fi
}

stdio_message_warn () {
	check="${1}"
	message="${2}"
	[ "$(validate_is_string "${check}")" -eq 1 ] || false
	[ "$(validate_is_string "${message}")" -eq 1 ] || false
	stdio_format_message "33" "W" "${check}" "${message}"
}

stdio_message_debug () {
	check="${1}"
	message="${2}"
	[ "$(validate_is_string "${check}")" -eq 1 ] || false
	[ "$(validate_is_string "${message}")" -eq 1 ] || false
	if [ "${VERBOSE}" -ge 2 ]
	then
		stdio_format_message "35" "D" "${check}" "${message}" >&2
	fi
}

stdio_message_error () {
	check="${1}"
	message="${2}"
	[ "$(validate_is_string "${check}")" -eq 1 ] || false
	[ "$(validate_is_string "${message}")" -eq 1 ] || false
	stdio_format_message "31" "E" "${check}" "${message}" >&2
}

stdio_format_message () {
	color="${1}"
	type="${2}"
	check="${3}"
	message="${4}"
	[ "$(validate_is_string "${type}")" -eq 1 ] || false
	[ "$(validate_is_string "${check}")" -eq 1 ] || false
	[ "$(validate_is_string "${message}")" -eq 1 ] || false
	[ "$(validate_is_number "${color}")" -eq 1 ] || false
	if [ "${COLORING}" -eq 1 ]
	then
		printf -- "\033[%sm%s: [%s] %s\033[m\n" "${color}" "${type}" "${check}" "${message}"
	else
		printf -- "%s: [%s] %s\n" "${type}" "${check}" "${message}"
	fi
}

fi
